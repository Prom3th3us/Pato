
cinnamon {
  akka {
    actors {
      "/PersonClassificationService/*" {
        report-by = class
        traceable = on
      }
      "/PersonClassificationServiceReadSide/*" {
        report-by = class
        traceable = on
      }
      "/*" {
        report-by = class
      }
    }
    streams {
      "CommittablePartitioned" {
        report-by = name
        flows = on
        traceable = on
        boundaries = on
      }
      "CommittablePartitioned-Ext" {
        report-by = name
        flows = on
        traceable = on
        boundaries = on
      }
    }
    stream.metrics {
      latency = on
      async-processing-time = on
      demand = on
      sampling {
        method = adaptive
        adaptive {
          target = 200ms
          max-every = 1000
        }
      }
    }
    persistence.entities {
      // sharded:? will expand to /system/sharding/?/*
      "sharded:?" {
        report-by = group
        traceable = on
      }
      "/*" {
        report-by = group
        traceable = on
      }
      "/system/sharding/SujetoActor/*" {
         report-by = group
         traceable = on
      }
      "/system/sharding/?/*" {
         report-by = group
         traceable = on
      }
    }

    ask-pattern.actors {
      "consumers.no_registral.obligacion.infrastructure.dependency_injection.*" {
        report-by = class
      }
      "consumers.no_registral.sujeto.infrastructure.dependency_injection.*" {
        report-by = class
      }
      "consumers.no_registral.objeto.infrastructure.dependency_injection.*" {
        report-by = class
      }
    }

    ask-pattern.actors {
      "akka.cluster.sharding.ShardRegion" {
        report-by = instance
      }
    }


    scala {
      future.instrumentation = on
      future.metrics {
        names = ["*"]
      }
    }

    http {
      servers {
        "*:*" {
          paths {
            "*" {
              metrics = on
            }
          }
        }
      }
      clients {
        "*:*" {
          paths {
            "*" {
              metrics = on
            }
          }
        }
      }
    }
    dispatchers {
      basic-information {
        names = ["*"]
      }
      time-information {
        names = ["*"]
      }
    }
  }
}

cinnamon.stopwatch {
  enabled = true
}

#Turning On non-defaults metrics
cinnamon.akka.cluster.domain-events = on
cinnamon.akka.cluster.member-events = on
cinnamon.akka.cluster.node-status = on
cinnamon.akka.cluster.node-metrics = on
cinnamon.akka.cluster.shard-region-info = on
cinnamon.akka.cluster.singleton-events = on
cinnamon.akka.cluster.shard-region-info = on
cinnamon.akka.remote.serialization-timing = on
cinnamon.akka.cluster.split-brain-resolver-events = on
cinnamon.scala.future.instrumentation = on
cinnamon.akka.stream.suppress-call-site-warnings = false


cinnamon.prometheus {
  exporters += http-server
  http-server {
    host = "172.22.1.1"
    host = ${?CLUSTER_IP}
    host = "0.0.0.0"
    port = 9091
    port = ${?CINNAMON_PORT}
  }
}


# Disable legacy metrics in akka-cluster.   --- TODO changed
Akka.cluster.metrics.enabled = on

# Enable metrics extension in akka-cluster-metrics.
Akka.extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]


cinnamon.opentracing {

  # Whether to allow null spans to be activated. Can be disabled if incompatible with tracer implementations.
  activate-null-spans = on

  # Whether to activate dummy spans for context-only trace propagation. Can be disabled if incompatible with tracer implementations.
  activate-context-only-spans = on


  auto-trace-when-debug = on
  auto-trace = on

  tracer {
    service-name = "PCS"
    tags {
      environment = "development"
    }

    sampler = rate-limiting-sampler

    rate-limiting-sampler {
      max-traces-per-second = 500
    }
  }

  cinnamon.akka.dispatchers {
    basic-information {
      names = ["*"]
    }
    time-information {
      names = ["*"]
    }
  }

  akka.scheduler {
    schedule-once {
      # Whether to connect traces for asynchronous calls scheduled with the Akka Scheduler scheduleOnce.
      # Turn it off to disconnect possibly infinite traces.
      connect-traces = on
      # Whether to build spans for the execution of the Runnable passed to the Akka Scheduler scheduleOnce.
      # Note that it will create spans even if build-spans is off when auto-trace is enabled and it's an active trace.
      build-spans = off
    }
  }

  alpakka.kafka {
    consumer-spans = on
    producer-spans = on
    consumer-continuations = on
    trace-consumers = on
    trace-producers = on
  }

  jaeger {

#    # Host for Jaeger trace span collector
#    host = "host.docker.internal"
    host = ${?JAEGER_HOST}

#    # UDP port for Jaeger trace span collector
#    port = 5775
    port = ${?JAEGER_PORT}

#    # Max size for UDP packets
    max-packet-size = 65000

#    # Flush interval for trace span reporter
    flush-interval = 1s

#    # Max queue size of trace span reporter
    max-queue-size = 1000

  }

  zipkin {
    url-connection {
      endpoint = "http://"${?ZIPKIN_HOST}":"${?ZIPKIN_PORT}"/api/v2/spans"
      encoding = "json"
    }
  }

}
