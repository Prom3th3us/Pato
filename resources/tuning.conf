projectionists {
    defaultParallelism = 3
    defaultParallelism = ${?PROJECTIONIST_PARALELLISM}
}

# Default persistence extension settings.
akka.persistence {
    # When starting many persistent actors at the same time the journal
    # and its data store is protected from being overloaded by limiting number
    # of recoveries that can be in progress at the same time. When
    # exceeding the limit the actors will wait until other recoveries have
    # been completed.
    #max-concurrent-recoveries = 50
    max-concurrent-recoveries = 50
}

#akka {
#  persistence {
#    journal.plugin = "inmemory-journal"
#    snapshot-store.plugin = "inmemory-snapshot-store"
#  }
#}


# Default reliable delivery settings.
akka.persistence.at-least-once-delivery {
    # Interval between re-delivery attempts.
    redeliver-interval = 5s
    # Maximum number of unconfirmed messages that will be sent in one
    # re-delivery burst.
    redelivery-burst-limit = 10000
    # After this number of delivery attempts a
    # `ReliableRedelivery.UnconfirmedWarning`, message will be sent to the actor.
    warn-after-number-of-unconfirmed-attempts = 5
    # Maximum number of unconfirmed messages that an actor with
    # AtLeastOnceDelivery is allowed to hold in memory.
    max-unconfirmed-messages = 10000
}



  # This is used to create the Akka actors dispatchers, who use fork join
  hardwareSpecs {

    # Min number of threads to cap factor-based parallelism number to
    parallelismMin = 8 //TODO Before 2
    # parallelismMin = ${?parallelismMin}
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelismFactor = 1 //TODO Before 3
    # Max number of threads to cap factor-based parallelism number to
    parallelismMax = 64 //TODO before 24



    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.

    #
    # There are a few edge cases.
    # If you have a case where the number of threads is equal to the number of actors
    # using the dispatcher, set the number extremely high, like 1000.

    # If your actors perform tasks that will take some time to complete
    # and you need fairness to avoid starvation of other actors sharing the pool,
    # set the throughput to 1.
    #
    processedMessagesPerActorPerThreadJump = 1 # https://letitcrash.com/post/40755146949/tuning-dispatchers-in-akka-applications

  }

#  //TODO changed to see improvement in streams
#  akka {
#    actor {
#      default-dispatcher {
#        executor = "fork-join-executor"
#        fork-join-executor {
#          parallelism-min = 2
#          parallelism-factor = 3
#          parallelism-max = 6
#        }
#        throughput = 20
#        throughput-deadline-time = 200ms
#      }
#    }
#  }

akka.actor.default-dispatcher.thread-pool-executor.allow-core-timeout = off

  akka.actor.default-blocking-io-dispatcher {
    thread-pool-executor {
    }
  }

  my-dispatcher {
    type = "Dispatcher"
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 8 //TODO Before 8
      core-pool-size-max = 24 //TODO Before 24
      max-pool-size-min = 8 //TODO Before 8
      max-pool-size-max = 24 //TODO Before 24
      task-queue-size = -1 //TODO Before 20
    }
    #  throughput = 10
  }

# Properties for akka.kafka.CommitterSettings can be
# defined in this section or a configuration section with
# the same layout.
akka.kafka.committer {

  # Maximum number of messages in a single commit batch
  max-batch = 5000

  # Maximum interval between commits
  max-interval = 10s

  # Parallelsim for async committing
  parallelism = 100

  # API may change.
  # Delivery of commits to the internal actor
  # WaitForAck: Expect replies for commits, and backpressure the stream if replies do not arrive.
  # SendAndForget: Send off commits to the internal actor without expecting replies (experimental feature since 1.1)
  delivery = WaitForAck

  # API may change.
  # Controls when a `Committable` message is queued to be committed.
  # OffsetFirstObserved: When the offset of a message has been successfully produced.
  # NextOffsetObserved: When the next offset is observed.
  when = OffsetFirstObserved
}



//To Debug Kafka messages
// akka {
//  actor {
//    debug.receive = true
//  }
//  kafka.consumer {
//    poll-interval = 300ms
//  }
// }
